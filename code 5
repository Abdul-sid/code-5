#![deny(unsafe_code)]
#![no_main]
#![no_std]

#[allow(unused_imports)]
use aux11::{entry, iprint, iprintln,prelude::*, Delay, Leds};
use heapless::{consts, Vec};

#[entry]
fn main() -> ! {
    let (usart1, mono_timer, itm, (mut delay, mut leds)) = aux11::init();

    // A buffer with 32 bytes of capacity
    let mut buffer: Vec<u8, consts::U32> = Vec::new();
         let ms = 50_u16;


    loop {

        // for a in 0..8{
        //     leds[a].on();
        //     delay.delay_ms(ms);
        // }
         buffer.clear();

        loop {
            while usart1.isr.read().rxne().bit_is_clear() {}
            let byte = usart1.rdr.read().rdr().bits() as u8;

            if buffer.push(byte).is_err() {
                // buffer full
                for byte in b"error: buffer full\n\r" {
                    while usart1.isr.read().txe().bit_is_clear() {}
                    usart1.tdr.write(|w| w.tdr().bits(u16::from(*byte)));

                    // if usart1.tdr.write(|w| w.tdr().bits(u16::from(*byte))) == (){
                    //     for a in 0..8{
                    //     leds[a].on();
                    //     delay.delay_ms(ms);
                    //     }
                    // }
                }

                break;

                
            }

            // Carriage return
            if byte == 13 {
                // Respond
                        leds[0].on();
                        delay.delay_ms(ms);
                        
                        leds[0].off();
                        delay.delay_ms(ms);
                        
    

                // for byte in buffer.iter().rev().chain(&[b'\n', b'\r']) {
                //     while usart1.isr.read().txe().bit_is_clear() {}
                //     usart1.tdr.write(|w| w.tdr().bits(u16::from(*byte)));
                // }

                break;
            }
         }
    }

}










// #![deny(unsafe_code)]
// #![no_main]
// #![no_std]

// #[allow(unused_imports)]
// use aux11::{entry, iprint, iprintln,prelude::*, Delay, Leds};
// use heapless::{consts, Vec};

// #[entry]
// fn main() -> ! {
//     let (usart1, mono_timer, itm, (mut delay, mut leds)) = aux11::init();

//     // A buffer with 32 bytes of capacity
//     let mut buffer: Vec<u8, consts::U32> = Vec::new();
//          let ms = 50_u16;


//     loop {

//         for a in 0..8{
//             leds[a].on();
//             delay.delay_ms(ms);
//         }
//     //     buffer.clear();

//     //     loop {
//     //         while usart1.isr.read().rxne().bit_is_clear() {}
//     //         let byte = usart1.rdr.read().rdr().bits() as u8;

//     //         if buffer.push(byte).is_err() {
//     //             // buffer full
//     //             for byte in b"error: buffer full\n\r" {
//     //                 while usart1.isr.read().txe().bit_is_clear() {}
//     //                 usart1.tdr.write(|w| w.tdr().bits(u16::from(*byte)));
//     //             }

//     //             break;
//     //         }

//     //         // Carriage return
//     //         if byte == 13 {
//     //             // Respond
//     //             for byte in buffer.iter().rev().chain(&[b'\n', b'\r']) {
//     //                 while usart1.isr.read().txe().bit_is_clear() {}
//     //                 usart1.tdr.write(|w| w.tdr().bits(u16::from(*byte)));
//     //             }

//     //             break;
//     //         }
//          }
//     }

